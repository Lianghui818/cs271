Microsoft (R) Macro Assembler Version 14.29.30152.0	    11/26/23 23:54:17
$Program Template     (Project 5.asm			     Page 1 - 1


				TITLE Program Template     (Project 5.asm)

				; Author: Lianghui Wang
				; Last Modified: 
				; OSU email address: wangl9@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:   project5              Due Date:
				; Description: Program generates 200 random integers in the range of 15 (LO) to 50 (HI) and stores them in consecutive elements of an array (ARRAYSIZE = 200).


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;  constant definitions 
				  
 = 00000032			   HI           =   50
 = 0000000F			   LO           =   15
 = 000000C8			   ARRAYSIZE    =   200

 00000000			.data
				  
				;  variable definitions 

 00000000 47 65 6E 65 72	   programTitle     BYTE    "Generating, Sorting, and Counting Random integers!                      Programmed by Lianghui", 0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 69 6E 74 65
	   67 65 72 73 21
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 50 72 6F
	   67 72 61 6D 6D
	   65 64 20 62 79
	   20 4C 69 61 6E
	   67 68 75 69 00
 0000005F 54 68 69 73 20	   intro1           BYTE    "This program generates 200 random integers between 15 and 50, inclusive.", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 31 35 20 61
	   6E 64 20 35 30
	   2C 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 00
 000000A8 49 74 20 74 68	   intro2           BYTE    "It then displays the original list, sorts the list, displays the median value of the list,", 0
	   65 6E 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6F 72 69 67
	   69 6E 61 6C 20
	   6C 69 73 74 2C
	   20 73 6F 72 74
	   73 20 74 68 65
	   20 6C 69 73 74
	   2C 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6D 65 64 69 61
	   6E 20 76 61 6C
	   75 65 20 6F 66
	   20 74 68 65 20
	   6C 69 73 74 2C
	   00
 00000103 64 69 73 70 6C	   intro3           BYTE    "displays the list sorted in ascending order, and finally displays the number of instances", 0
	   61 79 73 20 74
	   68 65 20 6C 69
	   73 74 20 73 6F
	   72 74 65 64 20
	   69 6E 20 61 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 2C 20
	   61 6E 64 20 66
	   69 6E 61 6C 6C
	   79 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   69 6E 73 74 61
	   6E 63 65 73 00
 0000015D 6F 66 20 65 61	   intro4           BYTE    "of each generated value, starting with the number of lowest.", 0
	   63 68 20 67 65
	   6E 65 72 61 74
	   65 64 20 76 61
	   6C 75 65 2C 20
	   73 74 61 72 74
	   69 6E 67 20 77
	   69 74 68 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 6C 6F
	   77 65 73 74 2E
	   00
 0000019A 2D 2D 50 72 6F	   ec1              BYTE    "--Program Intro--", 0
	   67 72 61 6D 20
	   49 6E 74 72 6F
	   2D 2D 00
 000001AC 2A 2A 45 43 31	   ec2              BYTE    "**EC1: Display the numbers ordered by column instead of by row. These numbers should still be printed 20-per-row, filling the first row before printing the second row.", 0
	   3A 20 44 69 73
	   70 6C 61 79 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 6F 72 64
	   65 72 65 64 20
	   62 79 20 63 6F
	   6C 75 6D 6E 20
	   69 6E 73 74 65
	   61 64 20 6F 66
	   20 62 79 20 72
	   6F 77 2E 20 54
	   68 65 73 65 20
	   6E 75 6D 62 65
	   72 73 20 73 68
	   6F 75 6C 64 20
	   73 74 69 6C 6C
	   20 62 65 20 70
	   72 69 6E 74 65
	   64 20 32 30 2D
	   70 65 72 2D 72
	   6F 77 2C 20 66
	   69 6C 6C 69 6E
	   67 20 74 68 65
	   20 66 69 72 73
	   74 20 72 6F 77
	   20 62 65 66 6F
	   72 65 20 70 72
	   69 6E 74 69 6E
	   67 20 74 68 65
	   20 73 65 63 6F
	   6E 64 20 72 6F
	   77 2E 00
 00000254 2A 2A 45 43 32	   ec3              BYTE    "**EC2: Generate the numbers directly into a file, then read the file into the array. This may modify your procedure parameters significantly. ", 0
	   3A 20 47 65 6E
	   65 72 61 74 65
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 20 64 69
	   72 65 63 74 6C
	   79 20 69 6E 74
	   6F 20 61 20 66
	   69 6C 65 2C 20
	   74 68 65 6E 20
	   72 65 61 64 20
	   74 68 65 20 66
	   69 6C 65 20 69
	   6E 74 6F 20 74
	   68 65 20 61 72
	   72 61 79 2E 20
	   54 68 69 73 20
	   6D 61 79 20 6D
	   6F 64 69 66 79
	   20 79 6F 75 72
	   20 70 72 6F 63
	   65 64 75 72 65
	   20 70 61 72 61
	   6D 65 74 65 72
	   73 20 73 69 67
	   6E 69 66 69 63
	   61 6E 74 6C 79
	   2E 20 00
 000002E3 2D 2D 50 72 6F	   ec4              BYTE    "--Program prompts, etc?", 0
	   67 72 61 6D 20
	   70 72 6F 6D 70
	   74 73 2C 20 65
	   74 63 3F 00
 000002FB 59 6F 75 72 20	   unsortTitle      BYTE    "Your unsorted random numbers: ", 0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 0000031A 59 6F 75 72 20	   sortTitle        BYTE    "Your sorted random numbers: ", 0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 20 00
 00000337 54 68 65 20 6D	   medianTitle      BYTE    "The median value of the array: ", 0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 00000357 59 6F 75 72 20	   countsTitle      BYTE    "Your list of instances of each generated number, starting with the smallest value: ", 0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 73 6D 61
	   6C 6C 65 73 74
	   20 76 61 6C 75
	   65 3A 20 00
 000003AB 47 6F 6F 64 62	   goodbye          BYTE    "Goodbye, and thanks for using my program!", 0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 00
 000003D5 20 00			   twoSpace         BYTE    " ", 0
 000003D7  000000C8 [		   randArray        DWORD   ARRAYSIZE   DUP(?)
	    00000000
	   ]
 000006F7  00000024 [		   counts           DWORD   36  DUP(0) 
	    00000000
	   ]
				   

 00000000			.code
				; ---------------------------------------------------------------------------------
				; Name: main
				;
				; Description: The main procedure of the program that orchestrates the execution
				;              of various tasks such as initializing, generating, and displaying
				;              arrays of random integers, sorting the array, calculating the median,
				;              counting occurrences, and displaying results. Finally, it concludes
				;              with a farewell message.
				;
				; Preconditions: None 
				;
				; Postconditions: Program execution completes.
				;
				; Receives: None 
				;
				; Returns: None.
				;
				; Registers Changed: EAX, EBX, ECX, EDX, ESI
				; ---------------------------------------------------------------------------------

 00000000			main PROC
				    
 00000000  68 00000000 R	    push    OFFSET  programTitle
 00000005  68 0000005F R	    push    OFFSET  intro1
 0000000A  68 000000A8 R	    push    OFFSET  intro2
 0000000F  68 00000103 R	    push    OFFSET  intro3
 00000014  68 0000015D R	    push    OFFSET  intro4
 00000019  68 0000019A R	    push    OFFSET  ec1
 0000001E  68 000001AC R	    push    OFFSET  ec2
 00000023  68 00000254 R	    push    OFFSET  ec3
 00000028  68 000002E3 R	    push    OFFSET  ec4
 0000002D  E8 0000008E		    call    introduction                                        ; Call introduction procedure

 00000032  E8 00000000 E	    call    Randomize                                           ; Choose random number

 00000037  68 000003D7 R	    push    OFFSET   randArray
 0000003C  E8 0000010F		    call    fillArray                   						; Generate and fill an array with random integers
				 
 00000041  68 000003D7 R	    push    OFFSET   randArray
 00000046  68 000002FB R	    push    OFFSET   unsortTitle
 0000004B  68 000003D5 R	    push    OFFSET   twoSpace
 00000050  68 000003D5 R	    push    OFFSET   twoSpace
 00000055  68 000006F7 R	    push    OFFSET   counts
 0000005A  68 000003D5 R	    push    OFFSET   twoSpace
 0000005F  E8 000001B5		    call    displayList										    ; Display the unsorted array

 00000064  68 000003D7 R	    push    OFFSET   randArray
 00000069  E8 00000109		    call    sortList    										; Sort the array

 0000006E  68 000003D7 R	    push    OFFSET   randArray
 00000073  68 000006F7 R	    push    OFFSET   counts
 00000078  E8 00000226		    call    countList									    	; Count occurrences of each value in the array

 0000007D  68 000003D7 R	    push    OFFSET   randArray
 00000082  68 00000337 R	    push    OFFSET   medianTitle
 00000087  E8 00000143		    call    displayMedian								    	; Display the median of the array

 0000008C  68 000003D7 R	    push    OFFSET   randArray
 00000091  68 0000031A R	    push    OFFSET   sortTitle
 00000096  68 000003D5 R	    push    OFFSET   twoSpace
 0000009B  68 00000357 R	    push    OFFSET   countsTitle
 000000A0  68 000006F7 R	    push    OFFSET   counts
 000000A5  68 000003D5 R	    push    OFFSET   twoSpace
 000000AA  E8 0000016A		    call    displayList 										; Display the sorted array

 000000AF  68 000003AB R	    push  OFFSET   goodbye
 000000B4  E8 0000020D		    call  bye  											; Display goodbye message

				    exit   
 000000B9  6A 00	   *	    push   +000000000h
 000000BB  E8 00000000 E   *	    call   ExitProcess
 000000C0			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: introduction
				; Description: Print introduction to user
				; Receives: None
				; Returns: intro message
				; Registers Changed: EAX, EBX, ECX, EDX
				; ---------------------------------------------------------------------------------
 000000C0			introduction PROC

 000000C0  55			    push    ebp                                        ; Set up stack frame
 000000C1  8B EC		    mov     ebp, esp

				    ; Display program title
 000000C3  8B 55 28		    mov     edx, [ebp+40]
 000000C6  E8 00000000 E	    call    WriteString
 000000CB  E8 00000000 E	    call    CrLf
 000000D0  E8 00000000 E	    call    CrLf

				    ; Display introdction and extra credits info
 000000D5  8B 55 24		    mov     edx, [ebp+36]
 000000D8  E8 00000000 E	    call    WriteString
 000000DD  E8 00000000 E	    call    CrLf
 000000E2  8B 55 20		    mov     edx, [ebp+32]
 000000E5  E8 00000000 E	    call    WriteString
 000000EA  E8 00000000 E	    call    CrLf
 000000EF  8B 55 1C		    mov     edx, [ebp+28]
 000000F2  E8 00000000 E	    call    WriteString
 000000F7  E8 00000000 E	    call    CrLf
 000000FC  8B 55 18		    mov     edx, [ebp+24]
 000000FF  E8 00000000 E	    call    WriteString
 00000104  E8 00000000 E	    call    CrLf
 00000109  8B 55 14		    mov     edx, [ebp+20]
 0000010C  E8 00000000 E	    call    WriteString
 00000111  E8 00000000 E	    call    CrLf
 00000116  E8 00000000 E	    call    CrLf
 0000011B  8B 55 10		    mov     edx, [ebp+16]
 0000011E  E8 00000000 E	    call    WriteString
 00000123  E8 00000000 E	    call    CrLf
 00000128  E8 00000000 E	    call    CrLf
 0000012D  8B 55 0C		    mov     edx, [ebp+12]
 00000130  E8 00000000 E	    call    WriteString
 00000135  E8 00000000 E	    call    CrLf
 0000013A  8B 55 08		    mov     edx, [ebp+8]
 0000013D  E8 00000000 E	    call    WriteString
 00000142  E8 00000000 E	    call    CrLf
 00000147  E8 00000000 E	    call    CrLf

 0000014C  5D			    pop     ebp                                       ; Restore previous stack frame
 0000014D  C2 000C		    ret     12                                        ; Clean up and return
 00000150			introduction ENDP


				; ---------------------------------------------------------------------------------
				; Name: fillArray
				; Description: Fills array with random integers in range [15, 50].
				; Receives: Array integers' address
				; Returns: Array
				; Registers Changed: EAX, ESI
				; ---------------------------------------------------------------------------------
 00000150			fillArray PROC

 00000150  55			    push    ebp                                      ; Set up stack frame
 00000151  8B EC		    mov     ebp, esp
 00000153  8B 75 08		    mov     esi, [ebp+8]                             ; Get the address of the array
 00000156  B9 000000C8		    mov     ecx, ARRAYSIZE                           ; Set the loop counter depends on array size

 0000015B			addElement:
 0000015B  B8 00000032		    mov     eax, HI         
 00000160  83 E8 0F		    sub     eax, LO                                  ; Set up the range
 00000163  40			    inc     eax
 00000164  E8 00000000 E	    call    RandomRange     
 00000169  83 C0 0F		    add     eax, LO         
 0000016C  89 06		    mov     [esi], eax                               ; Store the random number in the array

 0000016E  83 C6 04		    add     esi, 4                                   
 00000171  E2 E8		    loop    addElement                               ; Add elements until all elements are filled

 00000173  5D			    pop     ebp                                         
 00000174  C2 0004		    ret     4                               
 00000177			fillArray ENDP


				; ---------------------------------------------------------------------------------
				; Name: sortList
				; Description: Sorts an array of integers by using bubble sort
				; Receives: The address of the array to be sorted
				; Returns: A sortted array
				; Registers Changed: EAX, EBX, ECX, EDX, ESI
				; ---------------------------------------------------------------------------------
 00000177			sortList PROC

 00000177  55			    push   ebp              
 00000178  8B EC		    mov    ebp, esp
 0000017A  8B 75 08		    mov    esi, [ebp+8]                             ; Get the address of the array
 0000017D  B9 000000C8		    mov    ecx, ARRAYSIZE           
 00000182  49			    dec    ecx                              

 00000183			outerLoop:
 00000183  8B 06		    mov    eax, [esi]
 00000185  8B D6		    mov    edx, esi
 00000187  51			    push   ecx

 00000188			innerLoop:
 00000188  8B 5E 04		    mov    ebx, [esi+4]
 0000018B  8B 02		    mov    eax, [edx]
 0000018D  3B C3		    cmp    eax, ebx
 0000018F  7E 0E		    jle    skipSwap
 00000191  83 C6 04		    add    esi, 4
 00000194  56			    push   esi
 00000195  52			    push   edx
 00000196  51			    push   ecx
 00000197  E8 00000014		    call   exchangeElements
 0000019C  83 EE 04		    sub    esi, 4

 0000019F			skipSwap:
 0000019F  83 C6 04		    add    esi, 4
 000001A2  E2 E4		    loop   innerLoop

 000001A4  59			    pop    ecx
 000001A5  8B F2		    mov    esi, edx

 000001A7  83 C6 04		    add    esi, 4
 000001AA  E2 D7		    loop   outerLoop

 000001AC  5D			    pop    ebp              
 000001AD  C2 0008		    ret    8                

 000001B0			sortList ENDP

				; ---------------------------------------------------------------------------------
				; Name: ExchangeElements
				; Description: Exchanges the values at two given addresses
				; Receives: The addresses of the two elements need to be exchanged
				; Returns: Two elements have been exchange
				; Registers Changed: EAX, EBX, ECX, EDX, ESI
				; ---------------------------------------------------------------------------------
 000001B0			ExchangeElements PROC

 000001B0  55			    push    ebp             
 000001B1  8B EC		    mov     ebp, esp
 000001B3  60			    pushad                  

 000001B4  8B 45 10		    mov     eax, [ebp+16]                           ; Get the address of the first element
 000001B7  8B 5D 0C		    mov     ebx, [ebp+12]                           ; Get the address of the second element

 000001BA  8B D0		    mov     edx, eax
 000001BC  2B D3		    sub     edx, ebx

 000001BE  8B F3		    mov     esi, ebx
 000001C0  8B 0B		    mov     ecx, [ebx]                              ; Save the second element' value
 000001C2  8B 00		    mov     eax, [eax]                              ; Get the first element' value

 000001C4  89 06		    mov     [esi], eax                              ; Store the value of the first element at the second element
 000001C6  03 F2		    add     esi, edx        
 000001C8  89 0E		    mov     [esi], ecx      

 000001CA  61			    popad                   
 000001CB  5D			    pop     ebp             
 000001CC  C2 000C		    ret     12              
 000001CF			ExchangeElements ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayMedian
				; Description: Displays the median of an array 
				; Receives: The address of the array to find the median
				; Returns: The median number address
				; Registers Changed: EAX, EBX, ECX, EDX, ESI
				; ---------------------------------------------------------------------------------
 000001CF			displayMedian PROC

 000001CF  55			    push     ebp            
 000001D0  8B EC		    mov      ebp, esp
 000001D2  8B 75 0C		    mov      esi, [ebp+12]                          ; Get the address of the array
 000001D5  B8 000000C8		    mov      eax, ARRAYSIZE                         ; Set the loop counter to the array size
 000001DA  8B 55 08		    mov      edx, [ebp+8]                           ; Get the address of the title string
 000001DD  E8 00000000 E	    call     WriteString

 000001E2  BA 00000000		    mov      edx, 0
 000001E7  BB 00000002		    mov      ebx, 2
 000001EC  F7 F3		    div      ebx
 000001EE  8B C8		    mov      ecx, eax

 000001F0			medianLoop:
 000001F0  83 C6 04		    add      esi, 4
 000001F3  E2 FB		    loop     medianLoop

 000001F5  8B 46 FC		    mov      eax, [esi - 4]
 000001F8  03 06		    add      eax, [esi]
 000001FA  BA 00000000		    mov      edx, 0
 000001FF  BB 00000002		    mov      ebx, 2
 00000204  F7 F3		    div      ebx
 00000206  E8 00000000 E	    call     WriteDec
 0000020B  E8 00000000 E	    call     CrLf
 00000210  E8 00000000 E	    call     CrLf
 00000215  5D			    pop      ebp
 00000216  C2 0008		    ret      8

 00000219			displayMedian ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayList
				; Description: Displays the contents of an array, presenting 20 numbers per line
				; Receives: The address of the array to be displayed, and the title string.
				; Returns: The array
				; Registers Changed: EAX, EBX, ECX, EDX, ESI
				; ---------------------------------------------------------------------------------
 00000219			displayList PROC

 00000219  55			    push    ebp            
 0000021A  8B EC		    mov     ebp, esp
 0000021C  8B 75 1C		    mov     esi, [ebp+28]                             ; Get the address of the array
 0000021F  8B 55 18		    mov     edx, [ebp+24]                             ; Get the address of the title string
 00000222  E8 00000000 E	    call    WriteString                               ; Display the title
 00000227  E8 00000000 E	    call    CrLf

 0000022C  8B 55 14		    mov     edx, [ebp+20]      
 0000022F  BB 00000000		    mov     ebx, 0            

				    ; Outer loop for 20 rows
 00000234  B9 0000000A		    mov     ecx, 10           

 00000239			rowLoop:
 00000239  51			    push    ecx

				    ; Inner loop for 10 columns
 0000023A  B9 00000014		    mov     ecx, 20           
 0000023F  8B FB		    mov     edi, ebx                                  ; Current row index

 00000241			columnLoop:
 00000241  8B 04 BE		    mov     eax, [esi + edi*4] 
 00000244  E8 00000000 E	    call    WriteDec           
 00000249  52			    push    edx                                            
 0000024A  E8 00000000 E	    call    WriteString            
 0000024F  5A			    pop     edx              
 00000250  83 C7 0A		    add     edi, 10                                    ; move to next element
 00000253  E2 EC		    loop    columnLoop

 00000255  59			    pop     ecx
 00000256  E8 00000000 E	    call    CrLf                                      ; Move to the next line
 0000025B  43			    inc     ebx                                       ; Increment the new line counter
 0000025C  E2 DB		    loop    rowLoop

 0000025E  E8 00000000 E	   call     Crlf
 00000263  8B 55 10		   mov      edx, [ebp+16]                              ; Get the address of the counts title string
 00000266  E8 00000000 E	   call     WriteString
 0000026B  E8 00000000 E	   call     Crlf
 00000270  B9 00000024		   mov      ecx, 36               
 00000275  8B 75 0C		   mov      esi, [ebp+12]

 00000278			   printCounts:
 00000278  8B 06		   mov      eax, [esi]
 0000027A  83 F8 00		   cmp      eax, 0
 0000027D  74 22		   je       skip
 0000027F  E8 00000000 E	   call     WriteDec
 00000284  8B 55 08		   mov      edx, [ebp+8]
 00000287  E8 00000000 E	   call     WriteString
 0000028C  43			   inc      ebx
				   
 0000028D  83 FB 1E		   cmp      ebx, 30                                    ; Check if the maximum limit of integers per line is reached
 00000290  7C 0A		   jl       skipNextLinee
 00000292  E8 00000000 E	   call     CrLf
 00000297  BB 00000000		   mov      ebx, 0       ;the counter is refreshed

 0000029C			   skipNextLinee:
 0000029C  83 C6 04		   add      esi, 4       ;move to next element of the array
 0000029F  E2 D7		   loop     printCounts
				 
 000002A1			 skip:
 000002A1  5D			   pop      ebp
 000002A2  C3			   ret


 000002A3			displayList ENDP


				; ---------------------------------------------------------------------------------
				; Name: countList 
				; Description: Counts each value in the array and updates the corresponding counts array
				; Receives: The address of the array to be counted.
				; Returns: Counts array
				; Registers Changed: EAX, EDX, ESI, EDI, ECX, EBP
				; ---------------------------------------------------------------------------------
 000002A3			countList PROC

 000002A3  55			    push    ebp                 
 000002A4  8B EC		    mov     ebp, esp
 000002A6  8B 75 0C		    mov     esi, [ebp+12]                                   ; Get the address of the array
 000002A9  8B 7D 08		    mov     edi, [ebp+8]                                    ; Get the address of the counts array
 000002AC  B9 000000C8		    mov     ecx, ARRAYSIZE      

 000002B1			countLoop:
 000002B1  8B 06		    mov     eax, [esi]                                      ; Get the value at the current index
 000002B3  83 E8 0F		    sub     eax, LO                                         ; Convert to the counts array index
 000002B6  8B 14 87		    mov     edx, [edi + eax*4]                              ; Get the current count
 000002B9  42			    inc     edx             
 000002BA  89 14 87		    mov     [edi + eax*4], edx                              ; Update the count in the counts array
 000002BD  83 C6 04		    add     esi, 4          
 000002C0  E2 EF		    loop    countLoop

 000002C2  5D			    pop     ebp             
 000002C3  C2 0004		    ret     4               
 000002C6			countList ENDP





				; ---------------------------------------------------------------------------------
				; Name: bye
				; Description: Print goodbye message to users
				; Receives: The address of the goodbye message
				; Returns: goodbye message
				; Registers Changed: EDX, EBP
				; ---------------------------------------------------------------------------------
 000002C6			bye PROC

 000002C6  55			    push    ebp                                 ; Set up stack frame
 000002C7  8B EC		    mov     ebp, esp
 000002C9  E8 00000000 E	    call    CrLf
 000002CE  E8 00000000 E	    call    CrLf
 000002D3  8B 55 08		    mov     edx, [ebp+8]                        ; Get the address of the goodbye 
 000002D6  E8 00000000 E	    call    WriteString
 000002DB  E8 00000000 E	    call    CrLf
 000002E0  E8 00000000 E	    call    CrLf

 000002E5  5D			    pop     ebp             
 000002E6  C2 0004		    ret     4               

 000002E9			bye ENDP

				END main

Microsoft (R) Macro Assembler Version 14.29.30152.0	    11/26/23 23:54:17
$Program Template     (Project 5.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000787 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002E9 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExchangeElements . . . . . . . .	P Near	 000001B0 _TEXT	Length= 0000001F Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
bye  . . . . . . . . . . . . . .	P Near	 000002C6 _TEXT	Length= 00000023 Public STDCALL
countList  . . . . . . . . . . .	P Near	 000002A3 _TEXT	Length= 00000023 Public STDCALL
  countLoop  . . . . . . . . . .	L Near	 000002B1 _TEXT	
displayList  . . . . . . . . . .	P Near	 00000219 _TEXT	Length= 0000008A Public STDCALL
  rowLoop  . . . . . . . . . . .	L Near	 00000239 _TEXT	
  columnLoop . . . . . . . . . .	L Near	 00000241 _TEXT	
  printCounts  . . . . . . . . .	L Near	 00000278 _TEXT	
  skipNextLinee  . . . . . . . .	L Near	 0000029C _TEXT	
  skip . . . . . . . . . . . . .	L Near	 000002A1 _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001CF _TEXT	Length= 0000004A Public STDCALL
  medianLoop . . . . . . . . . .	L Near	 000001F0 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 00000150 _TEXT	Length= 00000027 Public STDCALL
  addElement . . . . . . . . . .	L Near	 0000015B _TEXT	
introduction . . . . . . . . . .	P Near	 000000C0 _TEXT	Length= 00000090 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000C0 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000177 _TEXT	Length= 00000039 Public STDCALL
  outerLoop  . . . . . . . . . .	L Near	 00000183 _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 00000188 _TEXT	
  skipSwap . . . . . . . . . . .	L Near	 0000019F _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countsTitle  . . . . . . . . . .	Byte	 00000357 _DATA	
counts . . . . . . . . . . . . .	DWord	 000006F7 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec1  . . . . . . . . . . . . . .	Byte	 0000019A _DATA	
ec2  . . . . . . . . . . . . . .	Byte	 000001AC _DATA	
ec3  . . . . . . . . . . . . . .	Byte	 00000254 _DATA	
ec4  . . . . . . . . . . . . . .	Byte	 000002E3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000003AB _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 0000005F _DATA	
intro2 . . . . . . . . . . . . .	Byte	 000000A8 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 00000103 _DATA	
intro4 . . . . . . . . . . . . .	Byte	 0000015D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianTitle  . . . . . . . . . .	Byte	 00000337 _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
randArray  . . . . . . . . . . .	DWord	 000003D7 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortTitle  . . . . . . . . . . .	Byte	 0000031A _DATA	
twoSpace . . . . . . . . . . . .	Byte	 000003D5 _DATA	
unsortTitle  . . . . . . . . . .	Byte	 000002FB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
