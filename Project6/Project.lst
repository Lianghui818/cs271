Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/10/23 21:02:21
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: Lianghui Wang
				; Last Modified:
				; OSU email address: wangl9@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:   6              Due Date: 2023/12/10
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Constants
 = 00000020			MAX_SIZE        EQU 32
 = 0000000A			ARRAY_SIZE      EQU 10
 = 7FFFFFFF			MAX_NUM         EQU 2147483647

 00000000			.data   
 00000000 50 52 4F 47 52	    introStr        BYTE "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 10,
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0A 57 72 69 74
	   74 65 6E 20 62
	   79 3A 20 4C 69
	   61 6E 67 68 75
	   69 20 57 61 6E
	   67 0A 0A 50 6C
	   65 61 73 65 20
	   70 72 6F 76 69
	   64 65 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   0A 45 61 63 68
	   20 6E 75 6D 62
	   65 72 20 6E 65
	   65 64 73 20 74
	   6F 20 62 65 20
	   73 6D 61 6C 6C
	   20 65 6E 6F 75
	   67 68 20 74 6F
	   20 66 69 74 20
	   69 6E 73 69 64
	   65 20 61 20 33
	   32 20 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   20 41 66 74 65
	   72 20 79 6F 75
	   20 68 61 76 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   69 6E 70 75 74
	   74 69 6E 67 20
	   74 68 65 20 72
	   61 77 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0A 0A 00
				                    "Written by: Lianghui Wang", 10, 10,
				                    "Please provide 10 signed decimal integers.",10,
				                    "Each number needs to be small enough to fit inside a 32 bit register.",
				                    " After you have finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.", 10, 10, 0
 00000148 00000000		    inputVal        SDWORD ?
 0000014C  0000000A [		    Array           SDWORD ARRAY_SIZE dup(0)
	    00000000
	   ]
 00000174 00000000		    totalSum        SDWORD 0
 00000178 50 6C 65 61 73	    input1          BYTE "Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000197 45 52 52 4F 52	    errorMsg        BYTE "ERROR: You did not enter a signed number or your number was too big.", 10, "Please try again: ", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0A 50
	   6C 65 61 73 65
	   20 74 72 79 20
	   61 67 61 69 6E
	   3A 20 00
 000001EF 0A 59 6F 75 20	    displayNumber   BYTE 10, "You entered the following numbers: ", 10, 0
	   65 6E 74 65 72
	   65 64 20 74 68
	   65 20 66 6F 6C
	   6C 6F 77 69 6E
	   67 20 6E 75 6D
	   62 65 72 73 3A
	   20 0A 00
 00000215 54 68 65 20 73	    displaySum      BYTE "The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000233 54 68 65 20 74	    displayAvg      BYTE "The truncated average is: ", 0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000024E 0A 0A 54 68 61	    thanksPrompt    BYTE 10, 10, "Thanks for playing! ", 0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 20 00
 00000265 2C 20 00		    comma           BYTE ", ", 0
 00000268 0A 00				newline 	    BYTE 10, 0

				; mDisplayString: Macro to print a string to the console
				mDisplayString MACRO str
				    PUSH    EDX
				    MOV     EDX, str ; move address of string to EDX
				    CALL    WriteString     ; call WriteString to print the string
				    POP     EDX
				ENDM



				;------------------------------------------------------------------------------
				; Name:mGetString
				; Description: Displays a prompt to the user, Macro to read a string from user
				; Receives: prompt to display (reference), string buffer (reference), length of string buffer (value)
				; Returns: none
				; Registers changed: edx, ecx
				;------------------------------------------------------------------------------

				mGetString MACRO prompt, str, len
				    PUSH    EDX
				    PUSH    EAX
				    MOV     EDX, prompt     ; move address of prompt to EDX
				    CALL    WriteString     ; call WriteString to print the prompt
				    MOV     EDX, str        ; move address of string to EDX
				    MOV     ECX, MAX_SIZE   ; move size to ECX
				    CALL    ReadString      ; call ReadString to get input from the user
				    MOV     len, EAX        ; move the length of the string to len
				    POP     EAX
				    POP     EDX
				ENDM


 00000000			.code

 00000000			main PROC
				    ; Display introduction
				    mDisplayString OFFSET introStr
 00000000  52		     1	    PUSH    EDX
 00000001  BA 00000000 R     1	    MOV     EDX, OFFSET introStr ; move address of string to EDX
 00000006  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 0000000B  5A		     1	    POP     EDX

 0000000C  B9 0000000A		    MOV     ECX, ARRAY_SIZE
 00000011  BF 0000014C R	    MOV     EDI, OFFSET Array
 00000016  8B F7		    MOV     ESI, EDI

				    ; Get 10 numbers
 00000018			get_number:
 00000018  68 00000178 R	    PUSH    OFFSET input1
 0000001D  68 00000197 R	    PUSH    OFFSET errorMsg
 00000022  68 00000148 R	    PUSH    OFFSET inputVal
 00000027  E8 000000A1		    CALL    ReadVal

				    ; add number to total sum
 0000002C  A1 00000148 R		MOV     EAX, inputVal
 00000031  01 05 00000174 R	    ADD     totalSum, EAX

				    ; add number to array
 00000037  89 07		    MOV     [EDI], EAX
 00000039  83 C7 04		    ADD     EDI, 4

 0000003C  E2 DA		    LOOP    get_number

				    ; Display numbers
 0000003E  B9 0000000A		    MOV     ECX, ARRAY_SIZE
				    mDisplayString OFFSET displayNumber
 00000043  52		     1	    PUSH    EDX
 00000044  BA 000001EF R     1	    MOV     EDX, OFFSET displayNumber ; move address of string to EDX
 00000049  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 0000004E  5A		     1	    POP     EDX

 0000004F			display_numbers:
 0000004F  FF 36		    PUSH    [ESI]
 00000051  E8 0000012F		    CALL    WriteVal
 00000056  83 C6 04		    ADD		ESI, 4

 00000059  83 F9 01		    CMP     ECX, 1
 0000005C  74 0E		    JE      display_sum

				    mDisplayString  OFFSET comma
 0000005E  52		     1	    PUSH    EDX
 0000005F  BA 00000265 R     1	    MOV     EDX, OFFSET comma ; move address of string to EDX
 00000064  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 00000069  5A		     1	    POP     EDX
 0000006A  E2 E3		    LOOP            display_numbers

 0000006C			display_sum:
				    mDisplayString  OFFSET newline
 0000006C  52		     1	    PUSH    EDX
 0000006D  BA 00000268 R     1	    MOV     EDX, OFFSET newline ; move address of string to EDX
 00000072  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 00000077  5A		     1	    POP     EDX
				    mDisplayString  OFFSET displaySum
 00000078  52		     1	    PUSH    EDX
 00000079  BA 00000215 R     1	    MOV     EDX, OFFSET displaySum ; move address of string to EDX
 0000007E  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 00000083  5A		     1	    POP     EDX
 00000084  FF 35 00000174 R	    PUSH            totalSum
 0000008A  E8 000000F6		    CALL            WriteVal

 0000008F			dsiplay_avergae:
				    mDisplayString OFFSET newline
 0000008F  52		     1	    PUSH    EDX
 00000090  BA 00000268 R     1	    MOV     EDX, OFFSET newline ; move address of string to EDX
 00000095  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 0000009A  5A		     1	    POP     EDX
				    mDisplayString OFFSET displayAvg
 0000009B  52		     1	    PUSH    EDX
 0000009C  BA 00000233 R     1	    MOV     EDX, OFFSET displayAvg ; move address of string to EDX
 000000A1  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 000000A6  5A		     1	    POP     EDX

				    ; Calculate the rounded integer average
 000000A7  A1 00000174 R	    MOV     EAX, totalSum
 000000AC  B9 0000000A		    MOV		ECX, 10
 000000B1  99			    CDQ
 000000B2  F7 F9		    IDIV    ECX
 000000B4  50			    PUSH    EAX
 000000B5  E8 000000CB		    CALL    WriteVal

 000000BA			ExitProgram:
				    mDisplayString OFFSET thanksPrompt
 000000BA  52		     1	    PUSH    EDX
 000000BB  BA 0000024E R     1	    MOV     EDX, OFFSET thanksPrompt ; move address of string to EDX
 000000C0  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 000000C5  5A		     1	    POP     EDX
				    INVOKE  ExitProcess, 0
 000000C6  6A 00	   *	    push   +000000000h
 000000C8  E8 00000000 E   *	    call   ExitProcess
 000000CD			main ENDP

				; --------------------------------------------------------
; Name: ReadVal
				; Description: Procedure to get input from user and convertToNum it. The procedure prompts the user for input, checks if it's a valid signed number, and if not, displays an error message and reprompts.
				; Receives: [EBP+16]: input prompt, [EBP+12]: error message prompt, [EBP+8]: inputVal address
				; Returns: None
				; Registers changed: ebp (saved by LOCAL), eax, ebx, esi, ecx
				; --------------------------------------------------------

 000000CD			ReadVal PROC
				    LOCAL    inputString[MAX_SIZE]:BYTE

				    ; Preserve registers
 000000CD  55		   *	    push   ebp
 000000CE  8B EC	   *	    mov    ebp, esp
 000000D0  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 000000D3  60			    PUSHAD

 000000D4  8B 5D 10		    MOV     EBX, [EBP+16]		; input prompt
 000000D7  8B 55 0C		    MOV     EDX, [EBP+12]		; error message prompt
 000000DA  8B 7D 08		    MOV     EDI, [EBP+8]		; inputVal address
 000000DD  8D 75 E0		    LEA		ESI, inputString	; input string array

 000000E0			GetInput:
				    ; Use the mGetString macro to get input from the user
				    mGetString  EBX, ESI, ECX
 000000E0  52		     1	    PUSH    EDX
 000000E1  50		     1	    PUSH    EAX
 000000E2  8B D3	     1	    MOV     EDX, EBX     ; move address of prompt to EDX
 000000E4  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the prompt
 000000E9  8B D6	     1	    MOV     EDX, ESI        ; move address of string to EDX
 000000EB  B9 00000020	     1	    MOV     ECX, MAX_SIZE   ; move size to ECX
 000000F0  E8 00000000 E     1	    CALL    ReadString      ; call ReadString to get input from the user
 000000F5  8B C8	     1	    MOV     ECX, EAX        ; move the length of the string to len
 000000F7  58		     1	    POP     EAX
 000000F8  5A		     1	    POP     EDX
 000000F9  EB 19		    JMP     ConvertString

 000000FB			GetInputAfterError:
				    ; Use mGetString macro to get input from the user when previous input is invalid
				    mGetString  EDX, ESI, ECX
 000000FB  52		     1	    PUSH    EDX
 000000FC  50		     1	    PUSH    EAX
 000000FD  8B D2	     1	    MOV     EDX, EDX     ; move address of prompt to EDX
 000000FF  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the prompt
 00000104  8B D6	     1	    MOV     EDX, ESI        ; move address of string to EDX
 00000106  B9 00000020	     1	    MOV     ECX, MAX_SIZE   ; move size to ECX
 0000010B  E8 00000000 E     1	    CALL    ReadString      ; call ReadString to get input from the user
 00000110  8B C8	     1	    MOV     ECX, EAX        ; move the length of the string to len
 00000112  58		     1	    POP     EAX
 00000113  5A		     1	    POP     EDX

 00000114			ConvertString:
 00000114  56			    PUSH    ESI
 00000115  51			    PUSH    ECX
 00000116  E8 0000000C		    CALL    convertToNum        ; convert string to number
				                                ; result stored in EBX
				                                ; if error occured, EAX is set to 1
 0000011B  83 F8 01		    CMP     EAX, 1
 0000011E  74 DB		    JE      GetInputAfterError

 00000120  89 1F		    MOV     [EDI], EBX  ; move converted number to memory

 00000122  61			    POPAD
 00000123  C9		   *	    leave  
 00000124  C2 000C		    RET     12          ; Return
 00000127			ReadVal ENDP


				; --------------------------------------------------------
				; Name: convertToNum
				; Description: Procedure to convert ascii input to integer number.  
				; This procedure takes a string and its length as arguments and converts the string to an integer and returns the integer value in EBX.
				; If there is an error during conversion (for example, if the string contains non-numeric characters),
				; the procedure sets EAX to 1. If the string starts with '-' the result will be negated, '+' is just skipped.
				; Receives: [EBP+12+12]: start of string, [EBP+8+12]: length of string
				;Returns: EAX, EBX
				; --------------------------------------------------------
 00000127			convertToNum PROC USES EDX ESI ECX
 00000127  52		   *	    push   edx
 00000128  56		   *	    push   esi
 00000129  51		   *	    push   ecx
 0000012A  55			    PUSH    EBP
 0000012B  8B EC		    MOV     EBP, ESP

 0000012D  8B 75 18		    MOV     ESI, [EBP+12+12]   ; start of string
 00000130  8B 4D 14		    MOV     ECX, [EBP+8+12]    ; length of string

 00000133  BA 00000001		    MOV     EDX, 1          ; negative multiplier
 00000138  33 C0		    XOR     EAX, EAX        ; error indicator
 0000013A  33 DB		    XOR     EBX, EBX        ; result

				    ; check signs
 0000013C			checkSigns:
 0000013C  AC			    LODSB
 0000013D  3C 00		    CMP     AL, 0           ; if end of string, exit
 0000013F  74 35		    JE      convertToNum_done
 00000141  3C 2D		    CMP     AL, '-'
 00000143  75 04		    JNE     notNegative
 00000145  F7 DA		    NEG     EDX             ; negate multiplier
 00000147  EB 06		    JMP     convertToNum_loop
 00000149			notNegative:
 00000149  3C 2B		    CMP     AL, '+'
 0000014B  74 02		    JE      convertToNum_loop        ; if positive sign, skip
 0000014D  75 05		    JNE     convert_digit   ; probably a digit, try converting

 0000014F			convertToNum_loop:
 0000014F  AC			    LODSB
 00000150  3C 00		    CMP     AL, 0           ; if end of string, exit
 00000152  74 22		    JE      convertToNum_done

 00000154			convert_digit:
				    ; check if it's a digit
 00000154  3C 30		    CMP     AL, '0'
 00000156  72 17		    JB      convertToNum_error
 00000158  3C 39		    CMP     AL, '9'
 0000015A  77 13		    JA      convertToNum_error

				    ; convert ascii to integer
 0000015C  2C 30		    SUB     AL, '0'
 0000015E  6B DB 0A		    IMUL    EBX, 10
 00000161  03 D8		    ADD     EBX, EAX

				    ; check if number is within bounds
 00000163  81 FB 7FFFFFFF	    CMP     EBX, MAX_NUM
 00000169  77 04		    JA      convertToNum_error

 0000016B  E2 E2		    LOOP    convertToNum_loop
 0000016D  EB 07		    JMP     convertToNum_done

 0000016F			convertToNum_error:
 0000016F  B8 00000001		    MOV     EAX, 1      ; indicate error
 00000174  EB 08		    JMP     convertToNum_exit

 00000176			convertToNum_done:
 00000176  0F AF DA			IMUL    EBX, EDX    ; muliplier
 00000179  B8 00000000		    MOV     EAX, 0      ; no error

 0000017E			convertToNum_exit:
 0000017E  5D			    POP     EBP
 0000017F  59		   *	    pop    ecx
 00000180  5E		   *	    pop    esi
 00000181  5A		   *	    pop    edx
 00000182  C2 0008		    RET     8       ; Return
 00000185			convertToNum ENDP


				; --------------------------------------------------------
				; Name: WriteVal
				; Description: Procedure for converting integer to string and displaying it. This procedure takes an integer and the address of a string as arguments. 
				; It then converts the integer to a string and displays it to the user.
				; Receives: [EBP + 12]: integer number (value), [EBP + 8]: address of display string
				; Returns: None
				; --------------------------------------------------------
 00000185			WriteVal PROC
				    LOCAL    numberString[MAX_SIZE]:BYTE
 00000185  55		   *	    push   ebp
 00000186  8B EC	   *	    mov    ebp, esp
 00000188  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 0000018B  60			    PUSHAD

				    ; get parameters from stack
 0000018C  8B 45 08		    MOV     EAX, [EBP + 8] ; the number
 0000018F  8D 7D E0		    LEA     EDI, numberString

 00000192  50			    PUSH    EAX
 00000193  57			    PUSH    EDI
				    ; convert integer to string
 00000194  E8 0000000E		    CALL    convertToStr

				    ; display the string
				    mDisplayString EDI
 00000199  52		     1	    PUSH    EDX
 0000019A  8B D7	     1	    MOV     EDX, EDI ; move address of string to EDX
 0000019C  E8 00000000 E     1	    CALL    WriteString     ; call WriteString to print the string
 000001A1  5A		     1	    POP     EDX

 000001A2  61			    POPAD
 000001A3  C9		   *	    leave  
 000001A4  C2 0004		    RET     4
 000001A7			WriteVal ENDP


				; --------------------------------------------------------
				; Name: convertToStr
				; Description: Procedure to convert integer to ascii string.
				; This procedure takes an integer and the address of a string as arguments and converts the integer into an ASCII string.
				; If the integer is negative, it converts the absolute value of the integer to a string and adds a negative sign to the front.
				; Receives:[EBP + 12]: the number, [EBP + 8]: address of display string
				; Returns: none
				; --------------------------------------------------------
 000001A7			convertToStr PROC
				    LOCAL    isNegative:WORD
 000001A7  55		   *	    push   ebp
 000001A8  8B EC	   *	    mov    ebp, esp
 000001AA  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000001AD  60			    PUSHAD

				    ; get parameters from stack
 000001AE  8B 45 0C		    MOV     EAX, [EBP + 12] ; the number
 000001B1  8B 75 08		    MOV     ESI, [EBP + 8]  ; address of display string
 000001B4  8B FE		    MOV     EDI, ESI  		; copy of string address

				    ; convert integer to ascii
 000001B6  BB 0000000A		    MOV     EBX, 10             ; base 10
 000001BB  83 C6 0B		    ADD     ESI, 11             ; move to end of string
 000001BE  C6 06 00		    MOV     BYTE PTR [ESI], 0   ; null terminator
 000001C1  66| C7 45 FE		    MOV     isNegative, 0		; false (initially)
	   0000

				    ; check if number is negative
 000001C7  83 F8 00		    CMP     EAX, 0
 000001CA  7C 02		    JL      negative
 000001CC  7D 08		    JGE     convertToStr_loop

 000001CE			negative:
				    ; if negative, set isNegative and negate number
 000001CE  66| C7 45 FE		    MOV     isNegative, 1
	   0001
 000001D4  F7 D8		    NEG     EAX

 000001D6			convertToStr_loop:
 000001D6  33 D2		    XOR     EDX, EDX
 000001D8  F7 F3		    DIV     EBX                 ; divide EAX by 10
 000001DA  83 C2 30		    ADD     EDX, 30h            ; convert remainder to ascii
 000001DD  4E			    DEC     ESI                 ; point to previous char
 000001DE  88 16		    MOV     [ESI], DL           ; store ascii char
 000001E0  85 C0		    TEST    EAX, EAX
 000001E2  75 F2		    JNZ     convertToStr_loop           ; if quotient is not zero, repeat

				    ; if number is negative, add negative sign
 000001E4  66| 83 7D FE		    CMP     isNegative, 1
	   01
 000001E9  75 04		    JNE     convertToStr_done

 000001EB  4E			    DEC     ESI
 000001EC  C6 06 2D		    MOV     BYTE PTR [ESI], '-'

 000001EF			convertToStr_done:
				    ; move converted string to start of passed string
				    ; start of converted string already in ESI
				    ; start of destination string (passed on stack) in EDI
 000001EF  B9 0000000C		    MOV     ECX, 12

 000001F4			move_string:
 000001F4  AC			    LODSB
 000001F5  AA			    STOSB
 000001F6  E2 FC		    LOOP move_string

 000001F8  61			    POPAD
 000001F9  C9		   *	    leave  
 000001FA  C2 0008		    RET     8
 000001FD			convertToStr ENDP



				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/10/23 21:02:21
#Program Template     (template.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000026A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001FD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000CD _TEXT	Length= 0000005A Public STDCALL
  inputString  . . . . . . . . .	Byte	 bp - 00000020
  GetInput . . . . . . . . . . .	L Near	 000000E0 _TEXT	
  GetInputAfterError . . . . . .	L Near	 000000FB _TEXT	
  ConvertString  . . . . . . . .	L Near	 00000114 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000185 _TEXT	Length= 00000022 Public STDCALL
  numberString . . . . . . . . .	Byte	 bp - 00000020
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
convertToNum . . . . . . . . . .	P Near	 00000127 _TEXT	Length= 0000005E Public STDCALL
  checkSigns . . . . . . . . . .	L Near	 0000013C _TEXT	
  notNegative  . . . . . . . . .	L Near	 00000149 _TEXT	
  convertToNum_loop  . . . . . .	L Near	 0000014F _TEXT	
  convert_digit  . . . . . . . .	L Near	 00000154 _TEXT	
  convertToNum_error . . . . . .	L Near	 0000016F _TEXT	
  convertToNum_done  . . . . . .	L Near	 00000176 _TEXT	
  convertToNum_exit  . . . . . .	L Near	 0000017E _TEXT	
convertToStr . . . . . . . . . .	P Near	 000001A7 _TEXT	Length= 00000056 Public STDCALL
  isNegative . . . . . . . . . .	Word	 bp - 00000002
  negative . . . . . . . . . . .	L Near	 000001CE _TEXT	
  convertToStr_loop  . . . . . .	L Near	 000001D6 _TEXT	
  convertToStr_done  . . . . . .	L Near	 000001EF _TEXT	
  move_string  . . . . . . . . .	L Near	 000001F4 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000CD Public STDCALL
  get_number . . . . . . . . . .	L Near	 00000018 _TEXT	
  display_numbers  . . . . . . .	L Near	 0000004F _TEXT	
  display_sum  . . . . . . . . .	L Near	 0000006C _TEXT	
  dsiplay_avergae  . . . . . . .	L Near	 0000008F _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 000000BA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_SIZE . . . . . . . . . . .	Number	 0000000Ah   
Array  . . . . . . . . . . . . .	DWord	 0000014C _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_NUM  . . . . . . . . . . . .	Number	 7FFFFFFFh   
MAX_SIZE . . . . . . . . . . . .	Number	 00000020h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma  . . . . . . . . . . . . .	Byte	 00000265 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayAvg . . . . . . . . . . .	Byte	 00000233 _DATA	
displayNumber  . . . . . . . . .	Byte	 000001EF _DATA	
displaySum . . . . . . . . . . .	Byte	 00000215 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000197 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input1 . . . . . . . . . . . . .	Byte	 00000178 _DATA	
inputVal . . . . . . . . . . . .	DWord	 00000148 _DATA	
introStr . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
newline  . . . . . . . . . . . .	Byte	 00000268 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
thanksPrompt . . . . . . . . . .	Byte	 0000024E _DATA	
totalSum . . . . . . . . . . . .	DWord	 00000174 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
