Microsoft (R) Macro Assembler Version 14.29.30152.0	    11/19/23 20:22:48
$Program Template     (project_4.asm			     Page 1 - 1


				TITLE Program Template     (project_4.asm)

				; Author: Lianghui Wang
				; Last Modified: 2023/11/19
				; OSU email address: wangl9@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  Project_4               Due Date: 2023/11/19
				; Description:	1. Designing and implementing procedures 2. Designing and implementing loops 3. Writing nested loops 4. Understanding data validation

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				; (insert constant definitions here)
 = 000000C7			nppage		EQU		199					; shown 20 rows of primes per page, 10 * 20 = 200

 00000000			.data
 00000000 50 72 69 6D 65		intro1		BYTE	"Prime Numbers Programmed by Lianghui", 0
	   20 4E 75 6D 62
	   65 72 73 20 50
	   72 6F 67 72 61
	   6D 6D 65 64 20
	   62 79 20 4C 69
	   61 6E 67 68 75
	   69 00
 00000025 45 6E 74 65 72		intro2		BYTE	"Enter the number of primes you would like to see", 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   73 20 79 6F 75
	   20 77 6F 75 6C
	   64 20 6C 69 6B
	   65 20 74 6F 20
	   73 65 65 00
 00000056 49 27 6C 6C 20		intro3		BYTE	"I'll accept orders for up to 4000 primes.",0
	   61 63 63 65 70
	   74 20 6F 72 64
	   65 72 73 20 66
	   6F 72 20 75 70
	   20 74 6F 20 34
	   30 30 30 20 70
	   72 69 6D 65 73
	   2E 00
 00000080 45 6E 74 65 72		prompt		BYTE	"Enter the number of primes to display [1..4000]:  ", 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   73 20 74 6F 20
	   64 69 73 70 6C
	   61 79 20 5B 31
	   2E 2E 34 30 30
	   30 5D 3A 20 20
	   00
 000000B3 4E 6F 20 70 72		errmsg		BYTE	"No primes for you! Number out of range. Try again.", 0
	   69 6D 65 73 20
	   66 6F 72 20 79
	   6F 75 21 20 4E
	   75 6D 62 65 72
	   20 6F 75 74 20
	   6F 66 20 72 61
	   6E 67 65 2E 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   00
 000000E6 52 65 73 75 6C		goodbye		BYTE	"Results certified by Lianghui. Goodbye.", 0
	   74 73 20 63 65
	   72 74 69 66 69
	   65 64 20 62 79
	   20 4C 69 61 6E
	   67 68 75 69 2E
	   20 47 6F 6F 64
	   62 79 65 2E 00
 0000010E 0A				prnumber	BYTE	10							; each row have 10 prime numbers
 0000010F 00000000			prcount		DWORD	?
 00000113 00000FA0			upbound		DWORD	4000						; Extend the range of primes to display up to 4000 primes
 00000117 00000001			lwbound		DWORD	1
 0000011B 00000002			count		DWORD	2
 0000011F 00000002			check		DWORD	2
 00000123 2D 2D 2D 50 72		ec1			BYTE	"---Program Intro---", 0
	   6F 67 72 61 6D
	   20 49 6E 74 72
	   6F 2D 2D 2D 00
 00000137 2A 2A 45 43 3A		ec2			BYTE	"**EC: Align the output columns.", 0 
	   20 41 6C 69 67
	   6E 20 74 68 65
	   20 6F 75 74 70
	   75 74 20 63 6F
	   6C 75 6D 6E 73
	   2E 00
 00000157 2A 2A 45 43 3A		ec3			BYTE	"**EC: Extend the range of primes to display up to 4000 primes, shown 20 rows of primes per page.", 0
	   20 45 78 74 65
	   6E 64 20 74 68
	   65 20 72 61 6E
	   67 65 20 6F 66
	   20 70 72 69 6D
	   65 73 20 74 6F
	   20 64 69 73 70
	   6C 61 79 20 75
	   70 20 74 6F 20
	   34 30 30 30 20
	   70 72 69 6D 65
	   73 2C 20 73 68
	   6F 77 6E 20 32
	   30 20 72 6F 77
	   73 20 6F 66 20
	   70 72 69 6D 65
	   73 20 70 65 72
	   20 70 61 67 65
	   2E 00
 000001B8 2D 2D 2D 50 72		ec4			BYTE	"---Program prompts, etc---", 0
	   6F 67 72 61 6D
	   20 70 72 6F 6D
	   70 74 73 2C 20
	   65 74 63 2D 2D
	   2D 00
 000001D3 20 00				space1		BYTE	" ", 0
 000001D5 20 20 00			space2		BYTE	"  ", 0
 000001D8 20 20 20 00			space3		BYTE	"   ", 0
 000001DC 20 20 20 20 00		space4		BYTE	"    ", 0
 000001E1 20 20 20 20 20		space5		BYTE	"     ", 0
	   00
 000001E7 00000000			primeCt		DWORD	0
 000001EB 50 72 65 73 73		nxpage		BYTE	"Press any key to continue ...", 0ah
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   20 2E 2E 2E 0A
					

 00000000			.code

 00000000			main PROC
 00000000  C7 05 000001E7 R		mov primeCt, 0										; Initialize prime count to 0
	   00000000

				; Display program introduction and instruct user to enter number of primes to be displayed
 0000000A  E8 0000001B			call	introduction

				; Prompt for integer in range [1...4000] and validate 1 <= n <= 4000
 0000000F  E8 0000004E			call	getUserData
 00000014  A3 0000010F R		mov		prcount, eax								; Store the user input in prcount for later use

				; Calculate and display all primes up to and including nth prime
 00000019  E8 00000080			call	showPrimes

				; Say goodbye to user
 0000001E  E8 000001C7			call	bye

					exit
 00000023  6A 00	   *	    push   +000000000h
 00000025  E8 00000000 E   *	    call   ExitProcess

 0000002A			main ENDP


				;------------------------------------------------------------
				; Name: introduction
				; Procedure to display program introduction to user
				; intro1,intro2 and intro3 are type BYTE
				; Receives: intro1,intro2 and intro3
				; Return: edx, OFFSET = info in intro1,intro2 and intro3
				;------------------------------------------------------------
 0000002A			introduction PROC

 0000002A  BA 00000000 R		mov	edx, OFFSET intro1
 0000002F  E8 00000000 E		call	WriteString						; display program name and author name
 00000034  E8 00000000 E		call	Crlf
 00000039  E8 00000000 E		call	Crlf
 0000003E  BA 00000025 R		mov		edx, OFFSET intro2
 00000043  E8 00000000 E		call	WriteString			
 00000048  E8 00000000 E		call	Crlf
 0000004D  BA 00000056 R		mov		edx, OFFSET intro3
 00000052  E8 00000000 E		call	WriteString						; display instructions for user
 00000057  E8 00000000 E		call	Crlf
 0000005C  E8 00000000 E		call	Crlf
 00000061  C3				ret
 00000062			introduction ENDP

				 
				;------------------------------------------------------------
				; Name: getUserData
				; Procedure to get data from user and and valitates the user input
				; Uses ReadDec to read a decimal number input by the user
				; prompt and errmsg are type BYTE, prcount is type DWORD
				; Receives: prompt, prcount
				; Return: errmsg or pass the prcount number
				;------------------------------------------------------------
 00000062			getUserData PROC


 00000062			validateInput:
				; Validates the input to be within the range [1...4000]
 00000062  BA 00000080 R		mov		edx, OFFSET prompt
 00000067  E8 00000000 E		call	WriteString						
 0000006C  E8 00000000 E		call	ReadDec							; Read the user's input
 00000071  A3 0000010F R		mov		prcount, eax					; Store the input in prcount

					; Validate the input
 00000076  81 3D 0000010F R		cmp		prcount, 4000
	   00000FA0
 00000080  7F 0A			jg		invalidInput					; If the enter number greater than 4000: invalid
 00000082  83 3D 0000010F R		cmp		prcount, 1
	   01
 00000089  7C 01			jl		invalidInput					; If the enter number less than 1: invalid
 0000008B  C3				ret

 0000008C			invalidInput:
 0000008C  BA 000000B3 R		mov		edx, OFFSET errmsg				
 00000091  E8 00000000 E		call	WriteString
 00000096  E8 00000000 E		call	CrLf
 0000009B  EB C5			jmp		validateInput					; ask user input again
 0000009D  C3				ret
 0000009E			getUserData ENDP


				;------------------------------------------------------------
				; Name: showPrimes
				; Procedure to calculate and display all prime number in screen
				; Loop for finging prime numbers up to the user-requested count
				; Start at 2, if the number can be divided by anything other than itself and 1, it will not print.
				; prcount, count and check are type DWORD
				; Receives: prcount, count and check
				; Return: count
				;------------------------------------------------------------
 0000009E			showPrimes PROC
					
 0000009E  FF 05 0000010F R		inc		prcount							; Increment the prime count to include the upper bound

 000000A4			primeloop:
				; The main loop for checking and displaying primes
				; Uses division and checks the remainder to determine primality

 000000A4  BA 00000000			mov		edx, 0							; Reset the remainder
 000000A9  A1 0000011B R		mov		eax, count						; Current number to check for primality
 000000AE  8B 0D 0000011F R		mov		ecx, check						
 000000B4  F7 F1			div		ecx								

 000000B6  83 FA 00			cmp		edx, 0							; If remainder is 0, it's not a prime
 000000B9  74 08			je		isprime							
 000000BB  FF 05 0000011F R		inc		check						
 000000C1  EB E1			jmp		primeloop						; Loop back to try the next divisor

 000000C3				isprime:
 000000C3  83 F8 01				cmp		eax, 1						
 000000C6  74 02				je		printprimes					; print the prime number
 000000C8  EB 21				jmp		notprime

 000000CA				printprimes:
 000000CA  A1 0000011B R			mov		eax, count						
 000000CF  E8 00000000 E			call	writeDec					
 000000D4  E8 00000025				call	aligncolumn					; Align the output column
 000000D9  FF 0D 0000010F R			dec		prcount						; Decrement the prime count
 000000DF  FF 05 000001E7 R			inc		primeCt						
 000000E5  8B 0D 0000010F R			mov		ecx, prcount				; Move the updated count back into ecx for the loop

 000000EB				notprime:
					; If the number is not prime, set up to check the next number
 000000EB  B8 00000002				mov		eax, 2
 000000F0  A3 0000011F R			mov		check, eax					; Move the reset divisor into the check variable
 000000F5  FF 05 0000011B R			inc		count						

 000000FB  E2 A7			loop	primeloop
 000000FD  C3				ret

 000000FE			showPrimes ENDP


				;------------------------------------------------------------
				; Name: aligncolumn
				; Procedure to aligns the output columns by adding spaces based on the number's length
				; prnumbe is type DWORD, spaces are type BYTE
				; Receives: prnumber, spaces
				; Return: eax
				;------------------------------------------------------------
 000000FE			aligncolumn PROC

 000000FE  FE 0D 0000010E R		dec		prnumber						; Decrement the primes per row counter
 00000104  8A 0D 0000010E R		mov		cl, prnumber
 0000010A  80 F9 00			cmp		cl, 0							; Check if we need a new row
 0000010D  74 61			je		newpage							; If we've printed 10 primes, start a new row

 0000010F  83 F8 0A			cmp		eax, 10
 00000112  7C 51		    jl		space_5							; If the number is less than 10, add 5 spaces

 00000114  83 F8 64			cmp		eax, 100
 00000117  7C 41		    jl		space_4							; If the number is less than 100, add 4 spaces

 00000119  3D 000003E8			cmp		eax, 1000
 0000011E  7C 2F		    jl		space_3							; If the number is less than 1000, add 3 spaces

 00000120  3D 00002710			cmp		eax, 10000
 00000125  7C 1D		    jl		space_2							; If the number is less than 10000, add 2 spaces

 00000127  3D 000186A0			cmp		eax, 100000
 0000012C  7C 0B		    jl		space_1							; If the number is less than 100000, add 1 space

 0000012E  BA 000001E1 R		mov edx, offset space5					
 00000133  E8 00000000 E		call writeString
 00000138  C3			    ret

 00000139			space_1:
				; Subroutine for adding 1 space
 00000139  BA 000001D3 R	    mov		edx, offset space1
 0000013E  E8 00000000 E	    call	writeString
 00000143  C3			    ret

 00000144			space_2:
				; Subroutine for adding 2 space
 00000144  BA 000001D5 R	    mov		edx, offset space2
 00000149  E8 00000000 E	    call	writeString
 0000014E  C3			    ret

 0000014F			space_3:
				; Subroutine for adding 3 space
 0000014F  BA 000001D8 R	    mov		edx, offset space3
 00000154  E8 00000000 E	    call	writeString
 00000159  C3			    ret

 0000015A			space_4:
				; Subroutine for adding 4 space
 0000015A  BA 000001DC R	    mov		edx, offset space4
 0000015F  E8 00000000 E	    call	writeString
 00000164  C3			    ret

 00000165			space_5:
				; Subroutine for adding 5 space
 00000165  BA 000001E1 R	    mov		edx, offset space5	
 0000016A  E8 00000000 E	    call	writeString
 0000016F  C3			    ret

 00000170			newpage:
				; Creat a new row for primes
 00000170  E8 00000000 E		call	CrLf						
 00000175  C6 05 0000010E R	    mov		prnumber, 10							; each row have 10 prime numbers
	   0A

					; Check if we need a new page
 0000017C  A1 000001E7 R	    mov		eax, primeCt							; Get the total prime counter
 00000181  3D 000000C7		    cmp		eax, nppage								; Compare against the primes per page constant
 00000186  7C 06		    jl		noNewPage
 00000188  E8 00000002		    call	nextPage								; New procedure to handle pausin
 0000018D  C3				ret

 0000018E			noNewPage:
 0000018E  C3			    ret

 0000018F			aligncolumn ENDP


				;------------------------------------------------------------
				; Name: nextPage
				; Handles the creation of a new row for primes
				; prnumbe is type DWORD, spaces are type BYTE
				; Receives: ecs, nxpage
				; Return: none
				;------------------------------------------------------------
 0000018F			nextPage PROC
 0000018F  E8 00000000 E		call	CrLf
 00000194  BA 00000123 R		mov		edx, offset ec1						
 00000199  E8 00000000 E	    call	WriteString
 0000019E  E8 00000000 E		call	CrLf
 000001A3  BA 00000137 R		mov		edx, offset ec2						
 000001A8  E8 00000000 E	    call	WriteString
 000001AD  E8 00000000 E		call	CrLf
 000001B2  BA 00000157 R		mov		edx, offset ec3				
 000001B7  E8 00000000 E	    call	WriteString
 000001BC  E8 00000000 E		call	CrLf
 000001C1  BA 000001B8 R		mov		edx, offset ec4				
 000001C6  E8 00000000 E	    call	WriteString								; Print extra credit information
 000001CB  E8 00000000 E		call	CrLf
 000001D0  BA 000001EB R	    mov		edx, offset nxpage						; Message to press any key
 000001D5  E8 00000000 E	    call	WriteString
 000001DA  E8 00000000 E	    call	ReadChar								; Wait for any key press
 000001DF  B8 00000000		    mov		eax, 0									; Reset prime count after a page
 000001E4  A3 000001E7 R	    mov		primeCt, eax
 000001E9  C3			    ret
 000001EA			nextPage ENDP


				;------------------------------------------------------------
				; Name: bye
				; ;Displays a farewell message and say good bye to user
				; goodbye is type BYTE
				; Receives: goodbye
				; Return: goodbye message
				;------------------------------------------------------------
 000001EA			bye PROC
 000001EA  E8 00000000 E		call	Crlf
 000001EF  BA 000000E6 R		mov		edx, OFFSET goodbye						; Print a farewell message and say good bye to user
 000001F4  E8 00000000 E		call	WriteString							
 000001F9  E8 00000000 E		call	Crlf
 000001FE  C3				ret
 000001FF			bye ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    11/19/23 20:22:48
$Program Template     (project_4.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000209 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001FF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
aligncolumn  . . . . . . . . . .	P Near	 000000FE _TEXT	Length= 00000091 Public STDCALL
  space_1  . . . . . . . . . . .	L Near	 00000139 _TEXT	
  space_2  . . . . . . . . . . .	L Near	 00000144 _TEXT	
  space_3  . . . . . . . . . . .	L Near	 0000014F _TEXT	
  space_4  . . . . . . . . . . .	L Near	 0000015A _TEXT	
  space_5  . . . . . . . . . . .	L Near	 00000165 _TEXT	
  newpage  . . . . . . . . . . .	L Near	 00000170 _TEXT	
  noNewPage  . . . . . . . . . .	L Near	 0000018E _TEXT	
bye  . . . . . . . . . . . . . .	P Near	 000001EA _TEXT	Length= 00000015 Public STDCALL
getUserData  . . . . . . . . . .	P Near	 00000062 _TEXT	Length= 0000003C Public STDCALL
  validateInput  . . . . . . . .	L Near	 00000062 _TEXT	
  invalidInput . . . . . . . . .	L Near	 0000008C _TEXT	
introduction . . . . . . . . . .	P Near	 0000002A _TEXT	Length= 00000038 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002A Public STDCALL
nextPage . . . . . . . . . . . .	P Near	 0000018F _TEXT	Length= 0000005B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showPrimes . . . . . . . . . . .	P Near	 0000009E _TEXT	Length= 00000060 Public STDCALL
  primeloop  . . . . . . . . . .	L Near	 000000A4 _TEXT	
  isprime  . . . . . . . . . . .	L Near	 000000C3 _TEXT	
  printprimes  . . . . . . . . .	L Near	 000000CA _TEXT	
  notprime . . . . . . . . . . .	L Near	 000000EB _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
check  . . . . . . . . . . . . .	DWord	 0000011F _DATA	
count  . . . . . . . . . . . . .	DWord	 0000011B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec1  . . . . . . . . . . . . . .	Byte	 00000123 _DATA	
ec2  . . . . . . . . . . . . . .	Byte	 00000137 _DATA	
ec3  . . . . . . . . . . . . . .	Byte	 00000157 _DATA	
ec4  . . . . . . . . . . . . . .	Byte	 000001B8 _DATA	
errmsg . . . . . . . . . . . . .	Byte	 000000B3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000000E6 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000025 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 00000056 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lwbound  . . . . . . . . . . . .	DWord	 00000117 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
nppage . . . . . . . . . . . . .	Number	 000000C7h   
nxpage . . . . . . . . . . . . .	Byte	 000001EB _DATA	
prcount  . . . . . . . . . . . .	DWord	 0000010F _DATA	
primeCt  . . . . . . . . . . . .	DWord	 000001E7 _DATA	
prnumber . . . . . . . . . . . .	Byte	 0000010E _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000080 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space1 . . . . . . . . . . . . .	Byte	 000001D3 _DATA	
space2 . . . . . . . . . . . . .	Byte	 000001D5 _DATA	
space3 . . . . . . . . . . . . .	Byte	 000001D8 _DATA	
space4 . . . . . . . . . . . . .	Byte	 000001DC _DATA	
space5 . . . . . . . . . . . . .	Byte	 000001E1 _DATA	
upbound  . . . . . . . . . . . .	DWord	 00000113 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
